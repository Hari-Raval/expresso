{"ast":null,"code":"var _jsxFileName = \"/Users/spoiledhua/Desktop/expresso/frontend/src/Components/BaristaOrders.js\";\n\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport React from 'react';\nimport { Header, Segment, Sidebar, Grid, Button, Divider, Dimmer, Loader } from 'semantic-ui-react';\nimport BaristaHeader from './BaristaHeader';\nimport * as dingURL from '../Assets/ding.mp3';\nimport { getBaristaOrders, postInProgress, postComplete, postPaid } from '../Axios/axios_getter';\nconst ding = new Audio(dingURL);\n\nclass BaristaOrders extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      allOrders: [],\n      loading: false,\n      transition: false\n    };\n\n    this.componentDidMount = () => {\n      this.setState({\n        loading: true\n      });\n      this.getPendingOrdersInterval(true);\n      this.intervalId = setInterval(this.getPendingOrdersInterval, 10000);\n    };\n\n    this.componentWillUnmount = () => {\n      clearInterval(this.intervalId);\n    };\n\n    this.toggleOn = () => {\n      this.setState({\n        transition: true\n      });\n      this.timeout = setTimeout(() => {\n        this.setState({\n          transition: false\n        });\n      }, 3000);\n    };\n\n    this.getPendingOrdersInterval = isFirstLoad => {\n      getBaristaOrders().then(allOrders => {\n        // Check if there are any new orders\n        let hasNewOrders = false;\n\n        if (!isFirstLoad) {\n          const oldOrders = new Set(this.state.allOrders.map(order => order.orderid));\n\n          for (let i = 0; i < allOrders.length; i++) {\n            if (!oldOrders.has(allOrders[i].orderid)) {\n              hasNewOrders = true;\n              break;\n            }\n          }\n        } // If there's a new order, play a ding\n\n\n        if (hasNewOrders) {\n          ding.play();\n        }\n\n        this.setState({\n          allOrders: allOrders\n        });\n      }).catch(error => {\n        console.log(error);\n      });\n      this.setState({\n        loading: false\n      });\n    };\n\n    this.getPendingOrders = isFirstLoad => {\n      console.log('entered');\n      getBaristaOrders().then(allOrders => {\n        // Check if there are any new orders\n        let hasNewOrders = false;\n\n        if (!isFirstLoad) {\n          const oldOrders = new Set(this.state.allOrders.map(order => order.orderid));\n\n          for (let i = 0; i < allOrders.length; i++) {\n            if (!oldOrders.has(allOrders[i].orderid)) {\n              hasNewOrders = true;\n              break;\n            }\n          }\n        } // If there's a new order, play a ding\n\n\n        if (hasNewOrders) {\n          ding.play();\n        }\n\n        this.setState({\n          allOrders: allOrders\n        });\n      }).catch(error => {\n        console.log(error);\n      });\n    };\n\n    this.handleInProgress = id => {\n      this.setState({\n        loading: true\n      });\n      postInProgress(id);\n      this.getPendingOrders();\n      this.setState({\n        loading: false\n      });\n    };\n\n    this.handleComplete = id => {\n      this.setState({\n        loading: true\n      });\n      postComplete(id);\n      this.getPendingOrders();\n      this.toggleOn();\n      this.setState({\n        loading: false\n      });\n    };\n\n    this.handlePaid = id => {\n      this.setState({\n        loading: true\n      });\n      postPaid(id);\n      this.getPendingOrders();\n      this.setState({\n        loading: false\n      });\n    };\n  }\n\n  render() {\n    const allOrders = this.state.allOrders;\n    let pendingOrders = allOrders.length === 0 ? React.createElement(Header, {\n      as: \"h3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, \"No Orders!\") : this.state.allOrders.map(order => {\n      return React.createElement(React.Fragment, {\n        key: order.orderid,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, React.createElement(Grid.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, React.createElement(Grid.Column, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, order.orderid)), React.createElement(Grid.Column, {\n        width: \"8\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, order.item.map(subitem => {\n        return React.createElement(React.Fragment, {\n          key: order.orderid + subitem,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 129\n          },\n          __self: this\n        }, React.createElement(\"h2\", {\n          style: {\n            margin: '0'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 130\n          },\n          __self: this\n        }, subitem), React.createElement(Divider, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 131\n          },\n          __self: this\n        }));\n      }), React.createElement(\"h3\", {\n        style: {\n          margin: '0'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, order.netid), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, order.time)), React.createElement(Grid.Column, {\n        width: \"2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, React.createElement(Button, {\n        circular: true,\n        disabled: order.order_status,\n        onClick: () => this.handleInProgress(order.orderid),\n        style: {\n          fontFamily: 'Avenir',\n          background: '#EBD36D'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, \"IN PROGRESS\")), React.createElement(Grid.Column, {\n        width: \"2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, order.status ? React.createElement(Header, {\n        as: \"h3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, \"PAID\") : React.createElement(Button, {\n        circular: true,\n        onClick: () => this.handlePaid(order.orderid),\n        style: {\n          color: 'white',\n          fontFamily: 'Avenir',\n          background: '#C96148'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, \"PENDING\")), React.createElement(Grid.Column, {\n        width: \"2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, React.createElement(Button, {\n        circular: true,\n        disabled: !order.status,\n        onClick: () => this.handleComplete(order.orderid),\n        style: {\n          color: 'white',\n          fontFamily: 'Avenir',\n          background: '#85A290'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, \"COMPLETE\"))));\n    });\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      as: Header,\n      direction: \"top\",\n      width: \"very wide\",\n      visible: this.state.transition,\n      animation: \"overlay\",\n      style: {\n        'zIndex': '1'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        height: '5vh'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }), React.createElement(Segment, {\n      raised: true,\n      textAlign: \"center\",\n      style: {\n        color: 'white',\n        fontFamily: 'Avenir',\n        background: '#EDAC86'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, \"Order completed!\")), React.createElement(BaristaHeader, {\n      history: this.props.history,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }), React.createElement(Dimmer, {\n      active: this.state.loading,\n      inverted: true,\n      page: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, React.createElement(Loader, {\n      inverted: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, \"Loading\")), React.createElement(Grid, {\n      stackable: true,\n      divided: \"vertically\",\n      verticalAlign: \"middle\",\n      textAlign: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, pendingOrders));\n  }\n\n  // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {\n    // @ts-ignore\n    this[key] = eval(code);\n  }\n\n}\n\nconst _default = BaristaOrders;\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(ding, \"ding\", \"/Users/spoiledhua/Desktop/expresso/frontend/src/Components/BaristaOrders.js\");\n  reactHotLoader.register(BaristaOrders, \"BaristaOrders\", \"/Users/spoiledhua/Desktop/expresso/frontend/src/Components/BaristaOrders.js\");\n  reactHotLoader.register(_default, \"default\", \"/Users/spoiledhua/Desktop/expresso/frontend/src/Components/BaristaOrders.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/Users/spoiledhua/Desktop/expresso/frontend/src/Components/BaristaOrders.js"],"names":["React","Header","Segment","Sidebar","Grid","Button","Divider","Dimmer","Loader","BaristaHeader","dingURL","getBaristaOrders","postInProgress","postComplete","postPaid","ding","Audio","BaristaOrders","Component","state","allOrders","loading","transition","componentDidMount","setState","getPendingOrdersInterval","intervalId","setInterval","componentWillUnmount","clearInterval","toggleOn","timeout","setTimeout","isFirstLoad","then","hasNewOrders","oldOrders","Set","map","order","orderid","i","length","has","play","catch","error","console","log","getPendingOrders","handleInProgress","id","handleComplete","handlePaid","render","pendingOrders","item","subitem","margin","netid","time","order_status","fontFamily","background","status","color","height","props","history"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Header, Segment, Sidebar, Grid, Button, Divider, Dimmer, Loader} from 'semantic-ui-react';\n\nimport BaristaHeader from './BaristaHeader';\nimport * as dingURL from '../Assets/ding.mp3';\n\nimport { getBaristaOrders, postInProgress, postComplete, postPaid } from '../Axios/axios_getter';\n\nconst ding = new Audio(dingURL);\n\nclass BaristaOrders extends React.Component {\n\n  state = {\n    allOrders: [],\n    loading: false,\n    transition: false\n  }\n\n  componentDidMount = () => {\n    this.setState({ loading: true });\n    this.getPendingOrdersInterval(true);\n    this.intervalId = setInterval(this.getPendingOrdersInterval, 10000);\n  }\n\n  componentWillUnmount = () => {\n    clearInterval(this.intervalId);\n  }\n\n  toggleOn = () => {\n    this.setState({ transition: true });\n    this.timeout = setTimeout(() => {this.setState({ transition: false })}, 3000);\n  }\n\n  getPendingOrdersInterval = (isFirstLoad) => {\n    getBaristaOrders()\n      .then(allOrders => {\n        // Check if there are any new orders\n        let hasNewOrders = false;\n        if (!isFirstLoad) {\n          const oldOrders = new Set(this.state.allOrders.map(order => order.orderid));\n          for (let i = 0; i < allOrders.length; i++) {\n            if (!oldOrders.has(allOrders[i].orderid)) {\n              hasNewOrders = true;\n              break;\n            }\n          }\n        }\n\n        // If there's a new order, play a ding\n        if (hasNewOrders) {\n          ding.play();\n        }\n        this.setState({ allOrders: allOrders });\n      })\n      .catch(error => {\n        console.log(error);\n      });\n    this.setState({ loading: false });\n  }\n\n  getPendingOrders = (isFirstLoad) => {\n    console.log('entered')\n    getBaristaOrders()\n      .then(allOrders => {\n        // Check if there are any new orders\n        let hasNewOrders = false;\n        if (!isFirstLoad) {\n          const oldOrders = new Set(this.state.allOrders.map(order => order.orderid));\n          for (let i = 0; i < allOrders.length; i++) {\n            if (!oldOrders.has(allOrders[i].orderid)) {\n              hasNewOrders = true;\n              break;\n            }\n          }\n        }\n\n        // If there's a new order, play a ding\n        if (hasNewOrders) {\n          ding.play();\n        }\n        this.setState({ allOrders: allOrders });\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  }\n\n  handleInProgress = id => {\n    this.setState({ loading: true });\n    postInProgress(id);\n    this.getPendingOrders();\n    this.setState({ loading: false });\n  }\n\n  handleComplete = id => {\n    this.setState({ loading: true });\n    postComplete(id);\n    this.getPendingOrders();\n    this.toggleOn();\n    this.setState({ loading: false });\n  }\n\n  handlePaid = id => {\n    this.setState({ loading: true });\n    postPaid(id);\n    this.getPendingOrders();\n    this.setState({ loading: false });\n  }\n\n  render() {\n\n    const { allOrders } = this.state;\n\n    let pendingOrders = (allOrders.length === 0) ?\n    <Header as='h3'>\n      No Orders!\n    </Header> :\n\n    this.state.allOrders.map(order => {\n      return (\n        <React.Fragment key={order.orderid}>\n          <Grid.Row>\n            <Grid.Column>\n              <h1>{order.orderid}</h1>\n            </Grid.Column>\n            <Grid.Column width='8'>\n              {order.item.map(subitem => {\n                return (\n                  <React.Fragment key={order.orderid + subitem}>\n                    <h2 style={{margin: '0'}}>{subitem}</h2>\n                    <Divider />\n                  </React.Fragment>\n                )\n              })}\n              <h3 style={{margin: '0'}}>{order.netid}</h3>\n              <p>{order.time}</p>\n            </Grid.Column>\n            <Grid.Column width='2'>\n              <Button circular disabled={order.order_status} onClick={() => this.handleInProgress(order.orderid)} style={{fontFamily:'Avenir', background: '#EBD36D'}}>IN PROGRESS</Button>\n            </Grid.Column>\n            <Grid.Column width='2'>\n              {order.status ? <Header as='h3'>PAID</Header> : <Button circular onClick={() => this.handlePaid(order.orderid)}  style={{color:'white', fontFamily:'Avenir', background:'#C96148'}}>PENDING</Button>}\n            </Grid.Column>\n            <Grid.Column width='2'>\n              <Button circular disabled={!order.status} onClick={() => this.handleComplete(order.orderid)} style={{color: 'white', fontFamily:'Avenir', background: '#85A290'}}>COMPLETE</Button>\n            </Grid.Column>\n          </Grid.Row>\n        </React.Fragment>\n      )\n    });\n\n    return (\n      <React.Fragment>\n        <Sidebar as={Header} direction='top' width='very wide' visible={this.state.transition} animation='overlay' style={{ 'zIndex': '1' }}>\n          <div style={{ height: '5vh' }} />\n          <Segment raised textAlign='center' style={{color: 'white', fontFamily:'Avenir', background: '#EDAC86'}}>\n            Order completed!\n          </Segment>\n        </Sidebar>\n        <BaristaHeader history={this.props.history} />\n        <Dimmer active={this.state.loading} inverted page>\n          <Loader inverted>Loading</Loader>\n        </Dimmer>\n        <Grid stackable divided='vertically' verticalAlign='middle' textAlign='center'>\n          {/*  new row for every order*/}\n          {pendingOrders}\n        </Grid>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default BaristaOrders;\n"]},"metadata":{},"sourceType":"module"}