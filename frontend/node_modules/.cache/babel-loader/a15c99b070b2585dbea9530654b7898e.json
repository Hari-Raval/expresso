{"ast":null,"code":"var _jsxFileName = \"/Users/spoiledhua/Desktop/expresso/frontend/src/Components/BaristaOrders.js\";\n\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport React from 'react';\nimport { Header, Grid, Button, Divider, Dimmer, Loader } from 'semantic-ui-react';\nimport BaristaHeader from './BaristaHeader';\nimport * as dingURL from '../Assets/ding.mp3';\nimport { getBaristaOrders, postInProgress, postComplete, postPaid } from '../Axios/axios_getter';\nconst ding = new Audio(dingURL);\n\nclass BaristaOrders extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      allOrders: [],\n      loading: false\n    };\n\n    this.componentDidMount = () => {\n      this.setState({\n        loading: true\n      });\n      setTimeout(this.getPendingOrders, 1000, true);\n      setInterval(this.getPendingOrders, 10000, false);\n    };\n\n    this.getPendingOrders = async isFirstLoad => {\n      await getBaristaOrders().then(allOrders => {\n        // Check if there are any new orders\n        let hasNewOrders = false;\n\n        if (!isFirstLoad) {\n          const oldOrders = new Set(this.state.allOrders.map(order => order.orderid));\n\n          for (let i = 0; i < allOrders.length; i++) {\n            if (!oldOrders.has(allOrders[i].orderid)) {\n              hasNewOrders = true;\n              break;\n            }\n          }\n        } // If there's a new order, play a ding\n\n\n        if (hasNewOrders) {\n          setTimeout(() => {\n            ding.play();\n          }, 0);\n        }\n\n        this.setState({\n          allOrders: allOrders\n        });\n      }).catch(error => {\n        console.log(error);\n        this.setState({\n          allOrders: []\n        });\n      });\n      this.setState({\n        loading: false\n      });\n    };\n\n    this.handleInProgress = async id => {\n      this.setState({\n        loading: true\n      });\n      await postInProgress(id);\n      this.getPendingOrders(false);\n      this.setState({\n        loading: false\n      });\n    };\n\n    this.handleComplete = async id => {\n      this.setState({\n        loading: true\n      });\n      await postComplete(id);\n      this.getPendingOrders(false);\n      this.setState({\n        loading: false\n      });\n    };\n\n    this.handlePaid = async id => {\n      this.setState({\n        loading: true\n      });\n      await postPaid(id);\n      this.getPendingOrders(false);\n      this.setState({\n        loading: false\n      });\n    };\n  }\n\n  render() {\n    const allOrders = this.state.allOrders;\n    let pendingOrders = allOrders.length === 0 ? React.createElement(Header, {\n      as: \"h3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \":)\") : this.state.allOrders.map(order => {\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, React.createElement(Grid.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, React.createElement(Grid.Column, {\n        verticalAlign: \"middle\",\n        width: \"2\",\n        style: {\n          textAlign: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, order.orderid)), React.createElement(Grid.Column, {\n        width: \"6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, order.item.map(subitem => {\n        return React.createElement(React.Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93\n          },\n          __self: this\n        }, React.createElement(\"h2\", {\n          style: {\n            margin: '0'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94\n          },\n          __self: this\n        }, subitem), React.createElement(Divider, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95\n          },\n          __self: this\n        }));\n      }), React.createElement(\"h3\", {\n        style: {\n          margin: '0'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, order.netid), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, order.time)), React.createElement(Grid.Column, {\n        width: \"3\",\n        verticalAlign: \"middle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, React.createElement(Button, {\n        circular: true,\n        disabled: order.order_status,\n        onClick: () => this.handleInProgress(order.orderid),\n        style: {\n          fontFamily: 'Avenir',\n          background: '#EBD36D'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, \"IN PROGRESS\")), React.createElement(Grid.Column, {\n        width: \"3\",\n        verticalAlign: \"middle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, React.createElement(Button, {\n        circular: true,\n        disabled: !order.status,\n        onClick: () => this.handleComplete(order.orderid),\n        style: {\n          fontFamily: 'Avenir',\n          background: '#85A290'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, \"COMPLETE\")), React.createElement(Grid.Column, {\n        width: \"2\",\n        verticalAlign: \"middle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, order.status ? React.createElement(Header, {\n        as: \"h3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, \"PAID\") : React.createElement(Button, {\n        circular: true,\n        onClick: () => this.handlePaid(order.orderid),\n        style: {\n          color: 'white',\n          fontFamily: 'Avenir',\n          background: '#C96148'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, \"PENDING\"))));\n    });\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(BaristaHeader, {\n      history: this.props.history,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }), React.createElement(Dimmer, {\n      active: this.state.loading,\n      inverted: true,\n      page: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(Loader, {\n      inverted: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, \"Loading\")), React.createElement(Grid, {\n      stackable: true,\n      divided: \"vertically\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, pendingOrders));\n  }\n\n  // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {\n    // @ts-ignore\n    this[key] = eval(code);\n  }\n\n}\n\nconst _default = BaristaOrders;\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(ding, \"ding\", \"/Users/spoiledhua/Desktop/expresso/frontend/src/Components/BaristaOrders.js\");\n  reactHotLoader.register(BaristaOrders, \"BaristaOrders\", \"/Users/spoiledhua/Desktop/expresso/frontend/src/Components/BaristaOrders.js\");\n  reactHotLoader.register(_default, \"default\", \"/Users/spoiledhua/Desktop/expresso/frontend/src/Components/BaristaOrders.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/Users/spoiledhua/Desktop/expresso/frontend/src/Components/BaristaOrders.js"],"names":["React","Header","Grid","Button","Divider","Dimmer","Loader","BaristaHeader","dingURL","getBaristaOrders","postInProgress","postComplete","postPaid","ding","Audio","BaristaOrders","Component","state","allOrders","loading","componentDidMount","setState","setTimeout","getPendingOrders","setInterval","isFirstLoad","then","hasNewOrders","oldOrders","Set","map","order","orderid","i","length","has","play","catch","error","console","log","handleInProgress","id","handleComplete","handlePaid","render","pendingOrders","textAlign","item","subitem","margin","netid","time","order_status","fontFamily","background","status","color","props","history"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Header, Grid, Button, Divider, Dimmer, Loader} from 'semantic-ui-react';\n\nimport BaristaHeader from './BaristaHeader';\nimport * as dingURL from '../Assets/ding.mp3';\n\nimport { getBaristaOrders, postInProgress, postComplete, postPaid } from '../Axios/axios_getter';\n\nconst ding = new Audio(dingURL);\n\nclass BaristaOrders extends React.Component {\n\n  state = {\n    allOrders: [],\n    loading: false\n  }\n\n  componentDidMount = () => {\n    this.setState({ loading: true });\n    setTimeout(this.getPendingOrders, 1000, true);\n    setInterval(this.getPendingOrders, 10000, false);\n  }\n\n  getPendingOrders = async (isFirstLoad) => {\n    await getBaristaOrders()\n      .then(allOrders => {\n        // Check if there are any new orders\n        let hasNewOrders = false;\n        if (!isFirstLoad) {\n          const oldOrders = new Set(this.state.allOrders.map(order => order.orderid));\n          for (let i = 0; i < allOrders.length; i++) {\n            if (!oldOrders.has(allOrders[i].orderid)) {\n              hasNewOrders = true;\n              break;\n            }\n          }\n        }\n\n        // If there's a new order, play a ding\n        if (hasNewOrders) {\n          setTimeout(() => {ding.play()}, 0);\n        }\n\n        this.setState({ allOrders: allOrders });\n      })\n      .catch(error => {\n        console.log(error);\n        this.setState({ allOrders: [] });\n      });\n    this.setState({ loading: false });\n  }\n\n  handleInProgress = async (id) => {\n    this.setState({ loading: true });\n    await postInProgress(id);\n    this.getPendingOrders(false);\n    this.setState({ loading: false });\n  }\n\n  handleComplete = async (id) => {\n    this.setState({ loading: true });\n    await postComplete(id);\n    this.getPendingOrders(false);\n    this.setState({ loading: false });\n  }\n\n  handlePaid = async (id) => {\n    this.setState({ loading: true });\n    await postPaid(id);\n    this.getPendingOrders(false);\n    this.setState({ loading: false });\n  }\n\n  render() {\n\n    const { allOrders } = this.state;\n\n    let pendingOrders = (allOrders.length === 0) ?\n    <Header as='h3'>\n      :)\n    </Header> :\n\n    this.state.allOrders.map(order => {\n      return (\n        <React.Fragment>\n          <Grid.Row>\n            <Grid.Column verticalAlign='middle' width='2' style={{textAlign:'center'}}>\n              <h1>{order.orderid}</h1>\n            </Grid.Column>\n            <Grid.Column width='6'>\n              {order.item.map(subitem => {\n                return (\n                  <React.Fragment>\n                    <h2 style={{margin: '0'}}>{subitem}</h2>\n                    <Divider />\n                  </React.Fragment>\n                )\n              })}\n              <h3 style={{margin: '0'}}>{order.netid}</h3>\n              <p>{order.time}</p>\n            </Grid.Column>\n            <Grid.Column width='3' verticalAlign='middle'>\n              <Button circular disabled={order.order_status} onClick={() => this.handleInProgress(order.orderid)} style={{fontFamily:'Avenir', background: '#EBD36D'}}>IN PROGRESS</Button>\n            </Grid.Column>\n            <Grid.Column width='3' verticalAlign='middle'>\n              <Button circular disabled={!order.status} onClick={() => this.handleComplete(order.orderid)} style={{fontFamily:'Avenir', background: '#85A290'}}>COMPLETE</Button>\n            </Grid.Column>\n            <Grid.Column width='2' verticalAlign='middle'>\n              {order.status ? <Header as='h3'>PAID</Header> : <Button circular onClick={() => this.handlePaid(order.orderid)}  style={{color:'white', fontFamily:'Avenir', background:'#C96148'}}>PENDING</Button>}\n            </Grid.Column>\n          </Grid.Row>\n        </React.Fragment>\n      )\n    });\n\n    return (\n      <React.Fragment>\n        <BaristaHeader history={this.props.history} />\n        <Dimmer active={this.state.loading} inverted page>\n          <Loader inverted>Loading</Loader>\n        </Dimmer>\n        <Grid stackable divided='vertically'>\n          {/*  new row for every order*/}\n          {pendingOrders}\n        </Grid>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default BaristaOrders;\n"]},"metadata":{},"sourceType":"module"}